/* Default UI description, language subject to change as it develops */

if (spi_attributes.gazelle_ignore)
{
    recurse: false;
    stop: true;
}

// List windows for all applications
if (spi_role.(desktop_frame or application)) {
    recurse: true;
}

// List children of active window
if (spi_state.active) {
    recurse: true;
}

// Rules for setting borders of targetable objects
if (targetable) {
    // "special" rules would go here

    // Absolute screen coordinates
    target_x: x_in_window;
    target_y: y_in_window;
/*
    //we actually need to do this because we don't get a notification when the absolute position of a control changes:
    target_x: ancestor_matches(spi_layer.window).spi_window_x + x_in_window;
    target_y: ancestor_matches(spi_layer.window).spi_window_y + y_in_window;
    // should probably treat "x" and "y" as those expressions in AtSpiObject
*/
    target_width: width;
    target_height: height;
}

// Rules that apply to controls in the active window
if (ancestor_matches(spi_state.active)) {
    menu (spi_state.enabled and spi_state.showing and parent_matches(spi_role.combo_box))
    {
        // Combo box menus aren't normally "showing" or "visible" but we still want to know the child items
        recurse: true;
    }

    // Select only things we could normally interact with
    if (not (spi_state.enabled and spi_state.showing and spi_state.sensitive and spi_state.visible)) {
        recurse: false;
        targetable: false;
        stop: true;
    }

    // Container types
    if (spi_role.frame or spi_role.desktop_frame or spi_role.dialog or
        spi_role.filler or spi_role.internal_frame or spi_role.panel or
        spi_role.html_container or spi_role.layered_pane or spi_role.option_pane or
        spi_role.root_pane or spi_role.option_pane or spi_role.scroll_pane or
        spi_role.split_pane or spi_role.table or spi_role.table_cell or spi_role.toolbar or
        spi_role.viewport or spi_role.window or spi_role.embedded or spi_role.document_frame or
        spi_role.section or spi_role.page or spi_role.form or spi_role.table_row or
        spi_role.document_web or spi_role.grouping or spi_role.info_bar or
        spi_role.page_tab or spi_role.page_tab_list) { recurse: true; }

    combo_box {
        targetable: true;

        if (targeted) {
            child (spi_role.menu) {
                action_A: spi_action.choose_child_and_click;
                action_name_A: Choose;
            }
            child (spi_role.text) {
                action_Y: spi_text.show_keyboard;
                action_name_Y: "Show Keyboard";
            }
        }

        // Need to see children of combo boxes but don't want to use them except for combo box things
        recurse: true;
        descendent {
            stop: true;
        }
    }

    // Direct control interaction
    page_tab {
        targetable: true;
        if (targeted)
        {
            action_A: spi_selectable.select_in_parent;
            action_name_A: "Change Tab";
        }
    }
    if (spi_role.button or spi_role.radio_button) {
        targetable: true;
        if (targeted)
        {
            action_A: spi_action.click;
            action_name_A: "Click";
        }
    }
    check_box {
        targetable: true;
        if (targeted)
        {
            action_A: spi_action.click;
            action_name_A: "Toggle";
        }
    }
    text {
        targetable: true;
        if (targeted)
        {
            action_A: spi_text.show_keyboard;
            action_name_A: "Show Keyboard";
        }
    }

    // Tab bar navigation
    page_tab (previous_sibling_matches(child(spi_state.showing))) {
        action_RB: spi_selectable.select_in_parent;
        action_name_RB: spi_text.text;
    }
    page_tab (next_sibling_matches(child(spi_state.showing))) {
        action_LB: spi_selectable.select_in_parent;
        action_name_LB: spi_text.text;
    }

    button (spi_text.text == "OK" or spi_text.text == "Run" or spi_text.text == "Play" or spi_text.text == "PLAY" or spi_text.text == "Yes")
    {
        action_Start: spi_action.click;
        action_name_Start: spi_text.text;
    }

    button (spi_text.text == "Cancel" or spi_text.text == "Close" or spi_text.text == "No")
    {
        action_B: spi_action.click;
        action_name_B: spi_text.text;
    }
}
